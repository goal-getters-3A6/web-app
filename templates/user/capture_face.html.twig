{% extends 'base-clean.html.twig' %}

{% block body %}
	<div class="camera">
		<video id="video">Video stream not available.</video>
		<button id="startbutton">Take photo</button>
	</div>
	<canvas id="canvas" style="display: none;"></canvas>
	<div class="output">
		<img id="photo" alt="The screen capture will appear in this box."/>
	</div>

	<script>
		(() => {
// The width and height of the captured photo. We will set the
// width to the value defined here, but the height will be
// calculated based on the aspect ratio of the input stream.
const width = 320; // We will scale the photo width to this
let height = 0; // This will be computed based on the input stream
let streaming = false;
// Indicates whether or not we're currently streaming video from the camera.

// HTML elements
let video = null;
let canvas = null;
let photo = null;
let startbutton = null;

function startup() {
video = document.getElementById("video");
canvas = document.getElementById("canvas");
photo = document.getElementById("photo");
startbutton = document.getElementById("startbutton");

navigator.mediaDevices.getUserMedia({video: true, audio: false}).then((stream) => {
video.srcObject = stream;
video.play();
}).catch((err) => {
console.error (`An error occurred: ${err}`);
});

video.addEventListener("canplay", (ev) => {
if (! streaming) {
height = video.videoHeight / (video.videoWidth / width);
if (isNaN(height)) {
height = width / (4 / 3);
}

video.setAttribute("width", width);
video.setAttribute("height", height);
canvas.setAttribute("width", width);
canvas.setAttribute("height", height);
streaming = true;
}
});

startbutton.addEventListener("click", (ev) => {
takepicture();
ev.preventDefault();
});
}

function takepicture() {
const context = canvas.getContext("2d");
if (width && height) {
canvas.width = width;
canvas.height = height;
context.drawImage(video, 0, 0, width, height);

// Save the image locally
const dataURL = canvas.toDataURL("image/png");
const fileName = `photo_${
Date.now()
}.png`;
saveImageLocally(dataURL, fileName);

// Send the path of the saved image to the server
sendImageToServer(fileName);
} else {
clearphoto();
}
}

function saveImageLocally(dataURL, fileName) {
const link = document.createElement('a');
link.href = dataURL;
link.download = fileName;
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}

function sendImageToServer(fileName) { // Create a FormData object to send the image file
const formData = new FormData();
formData.append('image', "C:\\Users\\Yosr\\Downloads\\" + fileName);

// Send the FormData object to the server
fetch("{{ path('verify_face') }}", {
method: 'POST',
body: formData
}).then(response => {
if (!response.ok) {
throw new Error('Network response was not ok');
}
return response.json(); // Parse the JSON response
}).then(data => { // Handle the JSON response
if (data.status === 200) { // Success response
alert(data.result.percentage);
} else { // Handle other status codes if needed
console.error('Server returned error:', data.error);
}
}).catch(error => {
console.error('Error:', error);
});
}

function clearphoto() {
const context = canvas.getContext("2d");
context.fillStyle = "#AAA";
context.fillRect(0, 0, canvas.width, canvas.height);
const data = canvas.toDataURL("image/png");
photo.setAttribute("src", data);
}

window.addEventListener("load", startup, false);
})();
	</script>


{% endblock %}
